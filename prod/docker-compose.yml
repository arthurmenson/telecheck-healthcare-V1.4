version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: spark-den-postgres
    environment:
      POSTGRES_DB: sparkden
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - spark-den-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: spark-den-redis
    ports:
      - "6379:6379"
    networks:
      - spark-den-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Auth Service
  auth-service:
    build:
      context: ../
      dockerfile: prod/docker/services/auth-service.Dockerfile
    container_name: spark-den-auth
    environment:
      NODE_ENV: production
      PORT: 3002
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: sparkden
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET:-dev-jwt-secret}
    ports:
      - "3002:3002"
    depends_on:
      - postgres
      - redis
    networks:
      - spark-den-network

  # Core Service
  core-service:
    build:
      context: ../
      dockerfile: prod/docker/services/core-service.Dockerfile
    container_name: spark-den-core
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: sparkden
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
    networks:
      - spark-den-network

  # AI/ML Service
  ai-ml-service:
    build:
      context: ../
      dockerfile: prod/docker/services/ai-ml-service.Dockerfile
    container_name: spark-den-ai-ml
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: sparkden
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "3000:3000"
    depends_on:
      - postgres
      - redis
    networks:
      - spark-den-network

  # Analytics Service
  analytics-service:
    build:
      context: ../
      dockerfile: prod/docker/services/analytics-service.Dockerfile
    container_name: spark-den-analytics
    environment:
      NODE_ENV: production
      PORT: 3003
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: sparkden
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "3003:3003"
    depends_on:
      - postgres
      - redis
    networks:
      - spark-den-network

  # PMS Integrations
  pms-integrations:
    build:
      context: ../
      dockerfile: prod/docker/services/pms-integrations.Dockerfile
    container_name: spark-den-pms-integrations
    environment:
      NODE_ENV: production
      PORT: 3004
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: sparkden
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "3004:3004"
    depends_on:
      - postgres
      - redis
    networks:
      - spark-den-network

  # EHR Frontend
  ehr-frontend:
    build:
      context: ../
      dockerfile: prod/docker/services/ehr-frontend.Dockerfile
    container_name: spark-den-ehr-frontend
    ports:
      - "5173:5173"
    depends_on:
      - auth-service
      - core-service
    networks:
      - spark-den-network

  # PMS Frontend
  pms-frontend:
    build:
      context: ../
      dockerfile: prod/docker/services/pms-frontend.Dockerfile
    container_name: spark-den-pms-frontend
    ports:
      - "5174:5174"
    depends_on:
      - auth-service
      - core-service
      - pms-integrations
    networks:
      - spark-den-network

  # Nginx Reverse Proxy (optional, for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: spark-den-nginx
    volumes:
      - ./docker/configs/nginx-main.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - ehr-frontend
      - pms-frontend
      - auth-service
      - core-service
      - ai-ml-service
      - analytics-service
      - pms-integrations
    networks:
      - spark-den-network

networks:
  spark-den-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: