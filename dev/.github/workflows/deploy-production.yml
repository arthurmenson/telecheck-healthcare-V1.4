name: Deploy to Production

on:
  push:
    branches: [main]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag to deploy'
        required: true
        default: 'latest'

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
  ECS_CLUSTER: spark-den-production

jobs:
  pre-deployment-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate deployment
        run: |
          echo "üîç Running pre-deployment validation..."

          # Check if this is a hotfix or regular release
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "‚úÖ Deploying from main branch"
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            echo "‚úÖ Deploying release: ${{ github.event.release.tag_name }}"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "‚úÖ Manual deployment of version: ${{ github.event.inputs.version }}"
          fi

      - name: Security scan
        run: |
          echo "üîí Running security checks..."
          # Add security scanning here (e.g., Snyk, Trivy)

  test:
    name: Run Full Test Suite
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run type checking
        run: pnpm run type-check

      - name: Run linting
        run: pnpm run lint

      - name: Run unit tests
        run: pnpm run test

      - name: Run integration tests
        run: pnpm run test:integration

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Generate test coverage
        run: pnpm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 45

    strategy:
      matrix:
        service:
          - auth-security
          - ai-ml-services
          - core-services
          - analytics-reporting
          - pms-integrations
          - frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_PRODUCTION_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set version tag
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "tag=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "tag=v$(date +%Y%m%d-%H%M%S)-${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./workstream/${{ matrix.service }}
          file: ./workstream/${{ matrix.service }}/Dockerfile.production
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/spark-den-${{ matrix.service }}:${{ steps.version.outputs.tag }}
            ${{ env.ECR_REGISTRY }}/spark-den-${{ matrix.service }}:production-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Scan image for vulnerabilities
        run: |
          # Install Trivy
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

          # Scan image
          trivy image --exit-code 1 --severity HIGH,CRITICAL \
            ${{ env.ECR_REGISTRY }}/spark-den-${{ matrix.service }}:${{ steps.version.outputs.tag }}

    outputs:
      version: ${{ steps.version.outputs.tag }}

  approval:
    name: Manual Approval Required
    runs-on: ubuntu-latest
    needs: build
    environment: production
    timeout-minutes: 60

    steps:
      - name: Approval Check
        run: |
          echo "üöÄ Production deployment approved!"
          echo "Version: ${{ needs.build.outputs.version }}"

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, approval]
    timeout-minutes: 30

    strategy:
      matrix:
        service:
          - auth-security
          - ai-ml-services
          - core-services
          - analytics-reporting
          - pms-integrations
          - frontend

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_PRODUCTION_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy service with blue-green strategy
        run: |
          echo "üöÄ Deploying ${{ matrix.service }} version ${{ needs.build.outputs.version }}"

          # Get current task definition
          TASK_DEFINITION=$(aws ecs describe-task-definition \
            --task-definition spark-den-production-${{ matrix.service }} \
            --query 'taskDefinition' \
            --output json)

          # Update image in task definition
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "${{ env.ECR_REGISTRY }}/spark-den-${{ matrix.service }}:${{ needs.build.outputs.version }}" \
            '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.placementConstraints) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')

          # Register new task definition
          NEW_REVISION=$(echo $NEW_TASK_DEFINITION | aws ecs register-task-definition --cli-input-json file:///dev/stdin --query 'taskDefinition.revision' --output text)

          # Update ECS service
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ matrix.service }} \
            --task-definition spark-den-production-${{ matrix.service }}:$NEW_REVISION

      - name: Wait for deployment to stabilize
        run: |
          echo "‚è≥ Waiting for deployment to stabilize..."
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ matrix.service }} \
            --max-attempts 20 \
            --delay 30

      - name: Verify deployment health
        run: |
          # Check service status
          SERVICE_STATUS=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ matrix.service }} \
            --query 'services[0].deployments[?status==`PRIMARY`].runningCount' \
            --output text)

          if [ "$SERVICE_STATUS" -gt "0" ]; then
            echo "‚úÖ Service ${{ matrix.service }} is running with $SERVICE_STATUS tasks"
          else
            echo "‚ùå Service ${{ matrix.service }} deployment failed"
            exit 1
          fi

  health-check:
    name: Production Health Check
    runs-on: ubuntu-latest
    needs: deploy
    timeout-minutes: 15

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_PRODUCTION_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get ALB endpoint
        id: get-endpoint
        run: |
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names spark-den-production-alb \
            --query 'LoadBalancers[0].DNSName' \
            --output text)
          echo "endpoint=https://$ALB_DNS" >> $GITHUB_OUTPUT

      - name: Wait for services to be healthy
        run: |
          echo "‚è≥ Waiting for services to be fully healthy..."
          sleep 120

      - name: Comprehensive health checks
        run: |
          echo "üîç Running comprehensive health checks..."

          # Frontend health check
          echo "Checking frontend..."
          curl -f -m 30 "${{ steps.get-endpoint.outputs.endpoint }}/" || exit 1

          # Auth service health check
          echo "Checking auth service..."
          curl -f -m 30 "${{ steps.get-endpoint.outputs.endpoint }}/api/auth/health" || exit 1

          # Core service health check
          echo "Checking core service..."
          curl -f -m 30 "${{ steps.get-endpoint.outputs.endpoint }}/api/patients/health" || exit 1

          # AI/ML service health check
          echo "Checking AI/ML service..."
          curl -f -m 30 "${{ steps.get-endpoint.outputs.endpoint }}/api/ai/health" || exit 1

          # Analytics service health check
          echo "Checking analytics service..."
          curl -f -m 30 "${{ steps.get-endpoint.outputs.endpoint }}/api/analytics/health" || exit 1

          # PMS integrations health check
          echo "Checking PMS integrations..."
          curl -f -m 30 "${{ steps.get-endpoint.outputs.endpoint }}/api/integrations/health" || exit 1

          echo "‚úÖ All services are healthy!"

      - name: Performance test
        run: |
          echo "üöÄ Running basic performance test..."
          # Add performance testing with tools like k6 or artillery
          for i in {1..10}; do
            curl -s -o /dev/null -w "%{time_total}\n" "${{ steps.get-endpoint.outputs.endpoint }}/"
          done

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy, health-check]
    if: failure()
    timeout-minutes: 15

    strategy:
      matrix:
        service:
          - auth-security
          - ai-ml-services
          - core-services
          - analytics-reporting
          - pms-integrations
          - frontend

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_PRODUCTION_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Rollback service
        run: |
          echo "üîÑ Rolling back ${{ matrix.service }}..."

          # Get previous task definition revision
          PREVIOUS_REVISION=$(aws ecs list-task-definitions \
            --family-prefix spark-den-production-${{ matrix.service }} \
            --status ACTIVE \
            --sort DESC \
            --query 'taskDefinitionArns[1]' \
            --output text)

          if [ "$PREVIOUS_REVISION" != "None" ] && [ "$PREVIOUS_REVISION" != "" ]; then
            # Extract revision number
            REVISION_NUM=$(echo $PREVIOUS_REVISION | awk -F: '{print $NF}')

            # Update service to previous revision
            aws ecs update-service \
              --cluster ${{ env.ECS_CLUSTER }} \
              --service ${{ matrix.service }} \
              --task-definition spark-den-production-${{ matrix.service }}:$REVISION_NUM

            echo "‚úÖ Rolled back ${{ matrix.service }} to revision $REVISION_NUM"
          else
            echo "‚ùå No previous revision found for ${{ matrix.service }}"
          fi

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy, health-check, rollback]
    if: always()

    steps:
      - name: Notify Success
        if: needs.deploy.result == 'success' && needs.health-check.result == 'success'
        run: |
          echo "üéâ Production deployment successful!"
          echo "Version: ${{ needs.build.outputs.version }}"
          # Add Slack/Discord/email notification here

      - name: Notify Failure
        if: needs.deploy.result == 'failure' || needs.health-check.result == 'failure'
        run: |
          echo "üö® Production deployment failed!"
          echo "Rollback initiated: ${{ needs.rollback.result }}"
          # Add critical alert notification here

      - name: Update deployment tracking
        run: |
          echo "üìù Updating deployment records..."
          # Log deployment to your tracking system
          # Update monitoring dashboards
          # Send metrics to analytics