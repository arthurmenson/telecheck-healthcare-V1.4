name: Deploy to Staging

on:
  push:
    branches: [develop]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
  ECS_CLUSTER: spark-den-staging

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run type checking
        run: pnpm run type-check

      - name: Run linting
        run: pnpm run lint

      - name: Run tests
        run: pnpm run test

      - name: Run security audit
        run: pnpm audit --audit-level moderate

  build-and-deploy:
    name: Build and Deploy Services
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 30

    strategy:
      matrix:
        service:
          - auth-security
          - ai-ml-services
          - core-services
          - analytics-reporting
          - pms-integrations
          - frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_STAGING_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./workstream/${{ matrix.service }}
          file: ./workstream/${{ matrix.service }}/Dockerfile.production
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/spark-den-${{ matrix.service }}:staging-${{ github.sha }}
            ${{ env.ECR_REGISTRY }}/spark-den-${{ matrix.service }}:staging-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Update ECS service
        run: |
          # Get current task definition
          TASK_DEFINITION=$(aws ecs describe-task-definition \
            --task-definition spark-den-staging-${{ matrix.service }} \
            --query 'taskDefinition' \
            --output json)

          # Update image in task definition
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "${{ env.ECR_REGISTRY }}/spark-den-${{ matrix.service }}:staging-${{ github.sha }}" \
            '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.placementConstraints) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')

          # Register new task definition
          NEW_REVISION=$(echo $NEW_TASK_DEFINITION | aws ecs register-task-definition --cli-input-json file:///dev/stdin --query 'taskDefinition.revision' --output text)

          # Update ECS service
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ matrix.service }} \
            --task-definition spark-den-staging-${{ matrix.service }}:$NEW_REVISION

      - name: Wait for deployment to complete
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ matrix.service }}

  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: build-and-deploy
    timeout-minutes: 10

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_STAGING_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get ALB endpoint
        id: get-endpoint
        run: |
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names spark-den-staging-alb \
            --query 'LoadBalancers[0].DNSName' \
            --output text)
          echo "endpoint=https://$ALB_DNS" >> $GITHUB_OUTPUT

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for services to be healthy..."
          sleep 60

      - name: Health check - Frontend
        run: |
          curl -f "${{ steps.get-endpoint.outputs.endpoint }}/" || exit 1

      - name: Health check - Auth Service
        run: |
          curl -f "${{ steps.get-endpoint.outputs.endpoint }}/api/auth/health" || exit 1

      - name: Health check - Core Service
        run: |
          curl -f "${{ steps.get-endpoint.outputs.endpoint }}/api/patients/health" || exit 1

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [build-and-deploy, health-check]
    if: always()

    steps:
      - name: Notify Success
        if: needs.build-and-deploy.result == 'success' && needs.health-check.result == 'success'
        run: |
          echo "✅ Staging deployment successful!"
          # Add Slack/Discord notification here if needed

      - name: Notify Failure
        if: needs.build-and-deploy.result == 'failure' || needs.health-check.result == 'failure'
        run: |
          echo "❌ Staging deployment failed!"
          # Add Slack/Discord notification here if needed

  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: health-check
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_STAGING_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get ALB endpoint
        id: get-endpoint
        run: |
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names spark-den-staging-alb \
            --query 'LoadBalancers[0].DNSName' \
            --output text)
          echo "endpoint=https://$ALB_DNS" >> $GITHUB_OUTPUT

      - name: Run integration tests
        env:
          API_BASE_URL: ${{ steps.get-endpoint.outputs.endpoint }}
        run: |
          # Run integration tests against staging environment
          if [ -f "tests/integration/package.json" ]; then
            cd tests/integration
            npm ci
            npm test
          else
            echo "No integration tests found, skipping..."
          fi