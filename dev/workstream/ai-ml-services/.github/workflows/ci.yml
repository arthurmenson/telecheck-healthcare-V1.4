name: AI/ML Services CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC for model drift detection
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  TENSORFLOW_BACKEND: 'cpu'
  ACCURACY_THRESHOLD: '0.95'
  PERFORMANCE_THRESHOLD_MS: '30000'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run type-check

    - name: Run unit tests
      run: npm run test:unit

    - name: Run integration tests
      run: npm run test:integration

    - name: Generate coverage report
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

    - name: Check coverage thresholds
      run: |
        coverage_percentage=$(grep -o 'Lines.*%' coverage/coverage-summary.json | grep -o '[0-9.]*')
        if (( $(echo "$coverage_percentage < 95" | bc -l) )); then
          echo "Coverage $coverage_percentage% is below 95% threshold"
          exit 1
        fi

  model-validation:
    name: AI/ML Model Validation
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 45

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Validate model accuracy
      run: npm run validate:accuracy
      env:
        ACCURACY_THRESHOLD: ${{ env.ACCURACY_THRESHOLD }}

    - name: Validate model performance
      run: npm run validate:performance
      env:
        PERFORMANCE_THRESHOLD_MS: ${{ env.PERFORMANCE_THRESHOLD_MS }}

    - name: Check bias and fairness
      run: npm run validate:bias
      env:
        BIAS_CHECK_ENABLED: 'true'
        FAIRNESS_THRESHOLD: '0.8'

    - name: Upload validation reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: validation-reports
        path: |
          reports/accuracy-*.json
          reports/performance-*.json
          reports/bias-*.json

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run npm audit
      run: npm audit --audit-level=high

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: HIPAA compliance check
      run: npm run compliance:check

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, model-validation, security-scan]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: dist/

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.CONTAINER_REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.CONTAINER_REGISTRY }}/ai-ml-services:latest
          ${{ secrets.CONTAINER_REGISTRY }}/ai-ml-services:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add deployment scripts here

    - name: Run staging smoke tests
      run: |
        echo "Running staging smoke tests"
        # Add smoke test scripts here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add deployment scripts here

    - name: Run production health checks
      run: |
        echo "Running production health checks"
        # Add health check scripts here

  model-drift-monitoring:
    name: Model Drift Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Monitor model drift
      run: npm run monitor:drift
      env:
        DRIFT_DETECTION_ENABLED: 'true'
        DRIFT_THRESHOLD: '0.1'

    - name: Generate drift report
      run: |
        echo "Generating model drift report"
        # Add drift report generation

    - name: Send alerts if drift detected
      if: failure()
      run: |
        echo "Model drift detected - sending alerts"
        # Add alerting logic

  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
    - name: Run performance benchmarks
      run: |
        echo "Running performance benchmarks"
        # Add performance monitoring scripts

    - name: Check SLA compliance
      run: |
        echo "Checking SLA compliance"
        # Verify 95%+ accuracy and <30s response time

  compliance-audit:
    name: HIPAA Compliance Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
    - name: Run compliance audit
      run: |
        echo "Running HIPAA compliance audit"
        # Add compliance checking scripts

    - name: Generate audit report
      run: |
        echo "Generating compliance audit report"
        # Add audit report generation

    - name: Archive audit results
      uses: actions/upload-artifact@v3
      with:
        name: compliance-audit-${{ github.run_number }}
        path: |
          reports/compliance-*.json
          reports/audit-*.json
        retention-days: 2555  # 7 years for HIPAA compliance