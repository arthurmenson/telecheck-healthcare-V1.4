# Multi-stage build for production optimization
FROM node:20-alpine AS base

# Install security updates and required tools
RUN apk update && apk upgrade && \
    apk add --no-cache dumb-init curl && \
    rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

WORKDIR /app

# Copy package files
COPY package.json package-lock.json* ./

# Dependencies stage
FROM base AS dependencies

# Install dependencies
RUN npm ci --only=production && npm cache clean --force

# Build stage (if TypeScript compilation is needed)
FROM dependencies AS build

# Install all dependencies for building
RUN npm ci

# Copy source code
COPY . .

# Build the application (if there's a build script)
RUN npm run build 2>/dev/null || echo "No build script found, skipping build"

# Production stage
FROM base AS production

# Copy package files and install production dependencies
COPY package.json package-lock.json* ./
RUN npm ci --only=production && npm cache clean --force

# Copy built application from build stage
COPY --from=build --chown=nodejs:nodejs /app/dist ./dist 2>/dev/null || true
COPY --from=build --chown=nodejs:nodejs /app/src ./src
COPY --from=build --chown=nodejs:nodejs /app/node_modules ./node_modules

# Copy any additional necessary files
COPY --chown=nodejs:nodejs tsconfig.json ./tsconfig.json 2>/dev/null || true

# Set proper ownership
RUN chown -R nodejs:nodejs /app

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3001/health || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application (prefer built version if available)
CMD ["sh", "-c", "if [ -f dist/index.js ]; then node dist/index.js; else npx tsx src/index.ts; fi"]