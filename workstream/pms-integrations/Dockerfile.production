# Multi-stage build for production optimization
FROM node:20-alpine AS base

# Install security updates and required tools
RUN apk update && apk upgrade && \
    apk add --no-cache dumb-init curl && \
    rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml* ./

# Install pnpm
RUN npm install -g pnpm

# Dependencies stage
FROM base AS dependencies

# Install dependencies
RUN pnpm config set auto-install-peers false && \
    pnpm install --frozen-lockfile --production=false

# Build stage
FROM dependencies AS build

# Copy source code
COPY . .

# Build the application
RUN pnpm run build && \
    pnpm prune --prod

# Production stage
FROM base AS production

# Copy package files and install production dependencies
COPY package.json pnpm-lock.yaml* ./
RUN pnpm config set auto-install-peers false && \
    pnpm install --frozen-lockfile --prod && \
    pnpm store prune

# Copy built application from build stage
COPY --from=build --chown=nodejs:nodejs /app/dist ./dist
COPY --from=build --chown=nodejs:nodejs /app/node_modules ./node_modules

# Clean up
RUN rm -rf /var/cache/apk/* && \
    rm -rf ~/.npm

# Set proper ownership
RUN chown -R nodejs:nodejs /app

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 3004

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3004/health || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "dist/server/index.js"]