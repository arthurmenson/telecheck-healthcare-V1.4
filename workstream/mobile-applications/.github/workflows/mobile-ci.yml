name: Mobile CI/CD Pipeline

on:
  push:
    branches: [main, develop, 'release/*']
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  EXPO_CLI_VERSION: 'latest'

jobs:
  # Code Quality and Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type checking
        run: npm run type-check

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: HIPAA Compliance Check
        run: |
          echo "Running HIPAA compliance checks..."
          # Custom script to check for HIPAA compliance
          npm run compliance:check

      - name: Code Coverage
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: true

  # Unit and Integration Tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: code-quality

    strategy:
      matrix:
        test-type: [unit, integration, e2e-mock]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ${{ matrix.test-type }} tests
        run: npm run test:${{ matrix.test-type }}

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: test-results/

  # Build for different platforms
  build:
    name: Build Apps
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/release/')

    strategy:
      matrix:
        platform: [ios, android]
        profile: [development, preview, staging]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Expo CLI
        run: npm install -g @expo/cli@${{ env.EXPO_CLI_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Setup EAS CLI
        run: npm install -g eas-cli

      - name: Authenticate with Expo
        run: eas login --non-interactive
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Configure environment
        run: |
          echo "Setting up environment for ${{ matrix.profile }}"
          cp .env.${{ matrix.profile }} .env

      - name: Build ${{ matrix.platform }} app
        run: eas build --platform ${{ matrix.platform }} --profile ${{ matrix.profile }} --non-interactive
        env:
          EAS_PROJECT_ID: ${{ secrets.EAS_PROJECT_ID }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.platform }}-${{ matrix.profile }}
          path: dist/

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run bundle size analysis
        run: npm run analyze:bundle

      - name: Performance benchmarks
        run: npm run test:performance

      - name: Memory leak tests
        run: npm run test:memory

      - name: Upload performance reports
        uses: actions/upload-artifact@v3
        with:
          name: performance-reports
          path: performance-reports/

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'spark-den-mobile'
          path: '.'
          format: 'HTML'

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: reports/

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, performance-test, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup EAS CLI
        run: npm install -g eas-cli

      - name: Authenticate with Expo
        run: eas login --non-interactive
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Submit to internal testing
        run: |
          eas submit --platform ios --profile staging --non-interactive
          eas submit --platform android --profile staging --non-interactive
        env:
          EAS_PROJECT_ID: ${{ secrets.EAS_PROJECT_ID }}

      - name: Update staging deployment
        run: eas update --branch staging --message "Staging deployment"

      - name: Notify staging deployment
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'Mobile app deployed to staging environment'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Production deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, performance-test, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup EAS CLI
        run: npm install -g eas-cli

      - name: Authenticate with Expo
        run: eas login --non-interactive
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Pre-deployment health checks
        run: npm run health:check

      - name: Deploy to app stores
        run: |
          eas submit --platform ios --profile production --non-interactive
          eas submit --platform android --profile production --non-interactive
        env:
          EAS_PROJECT_ID: ${{ secrets.EAS_PROJECT_ID }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          GOOGLE_SERVICE_ACCOUNT_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}

      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Mobile App Release v${{ github.run_number }}
          body: |
            Mobile application release with HIPAA-compliant healthcare features

            ## Features
            - Healthcare workflow optimization
            - Patient engagement tracking
            - Mobile security enhancements
            - Performance improvements

            ## Compliance
            - HIPAA compliance validated
            - Security audit passed
            - Performance benchmarks met
          draft: false
          prerelease: false

      - name: Post-deployment monitoring
        run: npm run monitor:deployment

      - name: Notify production deployment
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'Mobile app successfully deployed to production'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Monitoring and alerts
  post-deployment:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Health check monitoring
        run: |
          echo "Setting up post-deployment monitoring..."
          # Setup monitoring dashboards
          # Configure alerts
          # Validate deployment success

      - name: Performance monitoring
        run: |
          echo "Monitoring app performance..."
          # Track app performance metrics
          # Monitor crash rates
          # Check user engagement

      - name: Security monitoring
        run: |
          echo "Security monitoring active..."
          # Monitor for security incidents
          # Check compliance status
          # Validate data protection